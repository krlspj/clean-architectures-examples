definitions:
  models.CreateUserReq:
    properties:
      claims:
        items:
          type: integer
        type: array
      email:
        type: string
      name:
        type: string
      password:
        type: string
      surnames:
        type: string
    type: object
  models.CreationResp:
    properties:
      inserted_id:
        type: string
    type: object
  models.LoginUserReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginUserResp:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResp'
    type: object
  models.UpdateUserReq:
    properties:
      claims:
        items:
          type: integer
        type: array
      email:
        type: string
      name:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      surnames:
        type: string
    type: object
  models.UserResp:
    properties:
      claims:
        items:
          type: integer
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      surnames:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: Powered by scv-go-tools - https://github.com/sergicanet9/scv-go-tools
  title: Go Hexagonal API
paths:
  /api/claims:
    get:
      description: Gets all claims
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get claims
      tags:
      - Users
  /api/health:
    get:
      description: Runs a Health Check
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            type: object
        "503":
          description: Service Unavailable
          schema:
            type: object
      summary: Health Check
      tags:
      - Health
  /api/users:
    get:
      description: Gets all the users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResp'
            type: array
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - Users
    post:
      description: Creates a new user
      parameters:
      - description: New user to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserReq'
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/models.CreationResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Create user
      tags:
      - Users
  /api/users/{id}:
    delete:
      description: Delete a user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Gets a user by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - Users
    patch:
      description: Updates a user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserReq'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Update user
      tags:
      - Users
  /api/users/atomic:
    post:
      description: Creates two users atomically
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Atomic transaction proof
      tags:
      - Users
  /api/users/email/{email}:
    get:
      description: Gets a user by email
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get user by email
      tags:
      - Users
  /api/users/login:
    post:
      description: Logs in an user
      parameters:
      - description: Login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginUserResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Login user
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
