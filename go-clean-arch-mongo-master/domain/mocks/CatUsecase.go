// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// CatUsecase is an autogenerated mock type for the CatUsecase type
type CatUsecase struct {
	mock.Mock
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *CatUsecase) FindOne(ctx context.Context, id string) (*domain.Cat, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Cat
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Cat); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithPage provides a mock function with given fields: ctx, rp, p, filter, setsort
func (_m *CatUsecase) GetAllWithPage(ctx context.Context, rp int64, p int64, filter interface{}, setsort interface{}) ([]domain.Cat, int64, error) {
	ret := _m.Called(ctx, rp, p, filter, setsort)

	var r0 []domain.Cat
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, interface{}, interface{}) []domain.Cat); ok {
		r0 = rf(ctx, rp, p, filter, setsort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cat)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, interface{}, interface{}) int64); ok {
		r1 = rf(ctx, rp, p, filter, setsort)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, interface{}, interface{}) error); ok {
		r2 = rf(ctx, rp, p, filter, setsort)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InsertOne provides a mock function with given fields: ctx, u
func (_m *CatUsecase) InsertOne(ctx context.Context, u *domain.Cat) (*domain.Cat, error) {
	ret := _m.Called(ctx, u)

	var r0 *domain.Cat
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Cat) *domain.Cat); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Cat) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: ctx, cat, id
func (_m *CatUsecase) UpdateOne(ctx context.Context, cat *domain.Cat, id string) (*domain.Cat, error) {
	ret := _m.Called(ctx, cat, id)

	var r0 *domain.Cat
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Cat, string) *domain.Cat); ok {
		r0 = rf(ctx, cat, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Cat, string) error); ok {
		r1 = rf(ctx, cat, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
